#!/bin/sh
# vim: set ts=8 sw=4 sts=4 et ai:
# LABELS: hardware-only
# REQUIRES: awk(awk)
# REQUIRES: coreutils(printf sort tr)
# REQUIRES: sed(sed)
# REQUIRES: util-linux(lsblk)
# OPTIONAL: nvme-cli(nvme)
# OPTIONAL: sedutil-cli(sedutil-cli)
# OPTIONAL: smartmontools(smartctl)

if ! command -v smartctl >/dev/null && ! command -v nvme >/dev/null; then
    echo "error: This script requires smartctl/nvme. See smartmontools" >&2
    echo "error: and/or nvme-cli" >&2
    exit 1
fi

# First, run a scan to find all smart devices (regular and raid) and append
# lsblk devices to that (so we get NVMe devices as well).
uniq_by_prefix() {
    prev=
    while read line; do
        first_arg=${line%% *}
        if test "$prev" != "$first_arg"; then
            echo "$line"
            prev="$line"  # save entire line
        fi
    done
}
devices=$( (
    # smartctl may(?) find disks behind hwraid; adds --stuff sometimes.
    smartctl --scan 2>/dev/null | sed -e 's/ *[[#].*//'
    # lsblk finds the nvme devices just fine, no need for 'nvme list'
    lsblk -no TYPE,NAME | sed -e '/^disk/!d;s/[^ ]* */\/dev\//'
) | LC_ALL=C sort | uniq_by_prefix | sed -e '/^\/dev\/rbd[0-9]\+$/d')
# ^- exclude Ceph "RADOS Block Device"

if command -v sedutil-cli >/dev/null; then
    sed_status() {
        local ret
        if ret=$(sedutil-cli --query "$1" 2>/dev/null); then
            ret=$(printf '%s' "$ret" | sed -ne '/^    Locked/{
                s/.*LockingEnabled = Y, LockingSupported = Y.*/LOCKED/p
                s/.*LockingEnabled = N, LockingSupported = Y.*/NOT_LOCKED/p
                s/.*LockingSupported = N.*/NOT_SUPPORTED/p
                q
            }')
            echo "${ret:-UNEXPECTED}"
        else
            echo NOT_VALIDSED
        fi
    }
else
    sed_status() {
        echo NO_SEDUTIL
    }
fi


device_n=0
printf '['
if command -v smartctl >/dev/null; then
    echo "$devices" | while read line; do
        # Add -T verypermissive because we don't care if "mandatory" smart
        # commands don't work.
        smartctl=$(smartctl -T verypermissive -i $line)  # regular devices
        ret=$?

        # Retry with -d scsi for /dev/nvme* devices?
        test $ret -ne 0 &&
            smartctl=$(smartctl -T verypermissive -d scsi -i $line) &&
            ret=0

        if test $ret -eq 0; then
            comma=
            test $device_n -gt 0 && comma=,
            device_n=$((device_n + 1))

            # Removed 'smartctl --scan' added stuff
            dev=$(echo "$line" | sed -e 's/ .*//;s/"//g')
            product=$(echo "$smartctl" |
              sed -e '
                /^Vendor\|^Product\|Model/!d
                s/^[^:]*:[[:blank:]]*//;s/"//g' |
              tr '\n' ' ' |
              sed -e 's/[[:blank:]][[:blank:]]*/ /g;s/^ *//;s/ *$//')
            bytes=$(echo "$smartctl" | sed -e '
                /Capacity/!d
                s/^[^:]*:[[:blank:]]*//
                s/ bytes.*//;s/ [[].*//
                s/,//g;s/"//g' |
              head -n1)
            sectorsize=$(echo "$smartctl" | sed -e '
                /Formatted LBA Size/!d;s/^[^:]*:[[:blank:]]*//;s/"//g' |
                sort -n | head -n1)
            # Sector Size:      512 bytes logical/physical
            # Sector Sizes:     512 bytes logical, 4096 bytes physical
            test -z "$sectorsize" && \
                sectorsize=$(echo "$smartctl" | sed -e '
                    /^\(Sector Size\|Logical block size\)/!d
                    s/^[^:]*:.*[[:blank:]]\([0-9]\+\) bytes.*/\1/' | head -n1)
            serial=$(echo "$smartctl" | sed -e '
                /^Serial/!d;s/^[^:]*:[[:blank:]]*//;s/"//g')
            sedstatus=$(sed_status "$line")
            printf '%s{"%s":"%s","%s":"%s","%s":"%s","%s":"%s","%s":"%s",'"\
"'"%s":"%s"}\n' \
                "$comma" logicalname "$dev" product "$product" \
                serial "$serial" size "$bytes" sectorsize "$sectorsize" \
                sedstatus "$sedstatus"
        else
            echo "warning: failed to read $line" >&2
        fi
    done
else
    nvme_all=$(nvme list)
    nvme_json=$(nvme list -o json)
    echo "$devices" | while read dev; do
        comma=
        test $device_n -gt 0 && comma=,
        device_n=$((device_n + 1))

        nvme_line=$(echo "$nvme_all" | awk "{if(\$1==\"$dev\")print}")
        product=$(echo "$nvme_line" | awk -F'   *' '{print $3}')
        serial=$(echo "$nvme_line" | awk -F'   *' '{print $2}')
        #bytes=$(echo "$nvme_line" | awk -F'   *' '{print $5}')
        #bytes_unit=$(echo "$nvme_line" | awk -F'   *' '{print $6}')
        #bytes_unit=${bytes_unit%% *}  # "TB / blah.." -> "TB"
        escdev=$(echo "$dev" | sed -e 's#/#\\/#g')
        bytes=$(echo "$nvme_json" | sed -ne '
            /"'"$escdev"'"/,/}/{/PhysicalSize/{s/.* : //;s/,//;p}}')
        sectorsize=$(echo "$nvme_json" | sed -ne '
            /"'"$escdev"'"/,/}/{/SectorSize/{s/.* : //;s/,//;p}}')
        sedstatus=$(sed_status "$line")
        printf '%s{"%s":"%s","%s":"%s","%s":"%s","%s":"%s","%s":"%s",'"\
"'"%s":"%s"}\n' \
            "$comma" logicalname "$dev" product "$product" \
            serial "$serial" size "$bytes" sectorsize "$sectorsize" \
            sedstatus "$sedstatus"
    done
fi
printf ']\n'
