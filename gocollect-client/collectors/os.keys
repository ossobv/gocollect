#!/bin/sh
# vim: set ts=8 sw=4 sts=4 et ai:
# REQUIRES: coreutils(cut)
# REQUIRES: sed(sed)
# SUGGESTS: openssh-client(ssh-keygen)

list_keys() {
    # If ssh-keygen is new enough to support sha512, then it's new
    # enough to support multiple ssh key output (I think).
    if ssh-keygen -E sha512 -lf "$1" 2>/dev/null; then
        # Also list the "default" which sshd uses in the log files. This
        # means we often get both SHA512 hashes and others (md5,
        # sha256).
        ssh-keygen -lf "$1" 2>/dev/null

    # Older ssh-keygen will only show the fingerprint of a single key.
    # So we iterate over the file and print the lines. Also, we'll need
    # do update the "comment" which gets the filename instead.
    else
        tmp=$(mktemp)  # mktemp won't hand us any special chars other than dot
        esctmp=$(echo "$tmp" | sed -e 's#[.]#\\.#g')
        while read line; do
            echo "$line" >"$tmp"
            # Only echo stdout if zero status.
            out=$(ssh-keygen -lf "$tmp" 2>/dev/null)
            if test $? -eq 0; then
                comment="$(echo "$line" | sed -e 's/^[^ ]* [^ ]* //;s/#/;/g')"
                echo "$out" | sed -e "s# $esctmp # $comment #"
            fi
        done < "$1"
        rm "$tmp"
    fi
}

echo '{"ssh":['
(
    # Guess authorized_keys in <homedir>/.ssh
    cut -d: -f6 /etc/passwd | LC_ALL=C sort -u | sed -e 's#$#/.ssh/authorized_keys#'
    # Find authorized_keys files in /etc/ssh for ecryptfs systems.
    find /etc/ssh -name authorized_keys
) | LC_ALL=C sort -u | while read file; do
    # Readable non-empty file? If not, move to next.
    test -s "$file" || continue

    escfile=$(echo "$file" | sed -e 's#/#\\\/#g')
    list_keys "$file" | LC_ALL=C sort -u | sed -e '
        s/\([0-9]*\) \+\([^ ]*\) \+\(.*\)/{"bits":\1,"hash":"\2","path":"'$escfile'","comment":"\3"},/'
done | sed -e '$s/,$//'
echo ']}'
