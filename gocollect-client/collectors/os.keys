#!/bin/sh
# vim: set ts=8 sw=4 sts=4 et ai:
# REQUIRES: coreutils(cut)
# REQUIRES: sed(sed)
# SUGGESTS: openssh-client(ssh-keygen)

list_keys() {
    # Older ssh-keygen will only show the fingerprint of a single key.
    # So we iterate over the file and print the lines.
    # Also, older ssh-keygen doesn't allow -E sha512 to specify the
    # fingerprint hash. And, we also want the "default", because sshd
    # uses that in the logs.
    tmp=`mktemp`
    while read line; do
        echo "$line" > "$tmp"
        # Only echo stdout if zero status.
        out=`ssh-keygen -E sha512 -lf "$tmp" 2>/dev/null` &&
            echo "$out" | sed -e "s#$tmp#/tmp/tempfile#g"
        out=`ssh-keygen -lf "$tmp" 2>/dev/null` &&
            echo "$out" | sed -e "s#$tmp#/tmp/tempfile#g"
    done
    rm "$tmp"
}

echo '{"ssh":['
(
    # Guess authorized_keys in <homedir>/.ssh
    cut -d: -f6 /etc/passwd | LC_ALL=C sort -u | sed -e 's#$#/.ssh/authorized_keys#'
    # Find authorized_keys files in /etc/ssh for ecryptfs systems.
    find /etc/ssh -name authorized_keys
) | LC_ALL=C sort -u | while read file; do
    # Readable non-empty file? If not, move to next.
    test -s "$file" || continue

    escfile=`echo "$file" | sed -e 's#/#\\\/#g'`
    list_keys < "$file" | LC_ALL=C sort -u | sed -e '
        s/\([0-9]*\) \+\([^ ]*\) \+\(.*\)/{"bits":\1,"hash":"\2","path":"'$escfile'","comment":"\3"},/'
done | sed -e '$s/,$//'
echo ']}'
