#!/bin/sh
### BEGIN INIT INFO
# Provides:          gocollect
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GoCollect daemon
# Description:       GoCollect, the rarely changing sysinfo collector
### END INIT INFO
# Author: Walter Doekes <wjdoekes@osso.nl>
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="GoCollect daemon"
NAME=gocollect
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0
# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    if pgrep -P1 -x "$NAME" >/dev/null ||
            pgrep -P1 -xf "/bin/sh ${DAEMON}-fallback" >/dev/null; then
        return 1
    else
        sh -c "$DAEMON $DAEMON_ARGS </dev/null >/dev/null 2>&1 &"  # disown
        sleep 1
        pid=$(pgrep -P1 -x "$NAME")
        if test $? -ne 0; then
            ## Show what happens in the foreground.
            #$DAEMON $DAEMON_ARGS </dev/null

            # If possible, clean the environment of the fallback daemon
            # before starting. This avoids issues like LC_ALL being set
            # and altering the output of some commands.
            if env -i /bin/true 2>/dev/null; then
                CLEARENV="env -i PATH=$PATH"
            else
                CLEARENV=
            fi

            # Try again with fallback daemon.
            $CLEARENV sh -c \
                "${DAEMON}-fallback </dev/null >/dev/null 2>&1 &"  # disown
            sleep 1
            pid=$(pgrep -P1 -xf "/bin/sh ${DAEMON}-fallback")
            if test $? -ne 0; then
                return 2
            fi
        fi
        echo "$pid" > "$PIDFILE"
        return 0
    fi
}

# Function that checks the status of the daemon/service
#
do_status()
{
    # Return
    #   0 if daemon is running
    #   1 if daemon is not running
    pid=$(pgrep -P1 -x "$NAME"; pgrep -P1 -xf "/bin/sh ${DAEMON}-fallback")
    if test -z "$pid"; then
        rm -f "$PIDFILE"
        return 1
    else
        echo "$pid" > "$PIDFILE"
        return 0
    fi
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    if do_status; then
        kill -TERM $(cat "$PIDFILE")
        rm -f "$PIDFILE"
        return 0
    else
        return 1
    fi
}

log_daemon_msg()
{
    echo -n "$@" "..."
}

log_end_msg()
{
    if test $1 = 0; then
        echo " OK"
    else
        echo " failed"
    fi
    exit $1
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    log_daemon_msg "$DESC is running?" "$NAME"
      do_status
    ret=$?
    [ "$VERBOSE" != no ] && log_end_msg $ret
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac
:
