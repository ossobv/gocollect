#!/bin/sh
# Quick hack to collect data on machines where gocollect fails to work
# because it's not x86_64 or has ancient libc.

conf=/etc/gocollect.conf
path=/usr/share/gocollect/collectors
version=  # gets set before it's put into a tgz package

post() {
    url="$1"
    bindata=$(cat)
    curl --insecure -XPOST --data-binary "$bindata
" "$url"  # enter here to enforce trailing LF
}

log() {
    logger -s -p daemon.warn "gocollect: $@"
}

get_version() {
    if test -n "$version"; then
        echo "$version.fallback"
    else
        echo "fallback-md5-$(md5sum < "$0" 2>/dev/null | tr -d '\t -')"
    fi
}

get_core_id() {
    # Patch core_id with our version and optionally api_key.
    tmp_key=$(echo "$1" | sed -e 's/[^A-Za-z0-9_+/.-]//g')
    tmp_insert='"gocollect":"'$calc_version'",'
    if test -n "$tmp_key"; then
        tmp_insert=$tmp_insert'"gocollect-apikey":"'$tmp_key'",'
    fi
    "$path/core.id" | sed -e '/^[[:blank:]]*$/d' |
        sed -e "1s#[[:blank:]]*{#{$tmp_insert#"
}

get_config() {
    key="$1"
    sed -e '/^[[:blank:]]*'$key'[[:blank:]=]/!d;s/.*= *//' "$conf"
}

check_config() {
    # includes are NOT implemented
    if test -n "$(get_config include)"; then
        log "core: all 'include' directives in $conf will be ignored!"
    fi

    # collectors_path are NOT implemented
    collectors_path=$(get_config collectors_path)
    echo "$collectors_path" | while read tmp; do
        test "$tmp" != "$path" &&
            log "core: will not use '$tmp' as collectors_path"
    done
    if ! echo "$collectors_path" | grep -q "^$path$"; then
        log "core: will use '$path' as collectors_path"
    fi

    # will refuse to run as anything other than root
    if test $(id -u) != 0; then
        log "core: refusing to run as non-root. stopping.."
        exit 1
    fi
}

run() {
    api_key=$(get_config api_key | tail -n1)  # optional
    reg_url=$(get_config register_url | tail -n1)
    push_url=$(get_config push_url | tail -n1)
    
    core_id=$(get_core_id "$api_key")
    regid=$(echo "$core_id" | sed -e '/"regid"/!d;s/.*"regid": *"//;s/".*//')
    
    if test -z "$regid"; then
        data=$(echo "$core_id" | post "$reg_url")
        regid=$(echo "$data" | sed -e '/"regid"/!d;s/.*"regid": *"//;s/".*//')
        if test -z "$regid"; then
            log "reg failure"
            exit 1
        fi
        
        mkdir -p /var/lib/gocollect
        chmod 700 /var/lib/gocollect
        echo "$regid" > /var/lib/gocollect/core.id.regid
    
        # Re-get core info. Check values.
        core_id=$(get_core_id "$api_key")
        regid=$(echo "$core_id" |
                sed -e '/"regid"/!d;s/.*"regid": *"//;s/".*//')
        if test -z "$regid"; then
            log "core.id reg load failure"
            exit 1
        fi
    fi

    # Jobs
    temp=$(mktemp)
    find "$path" -maxdepth 1 -type f -perm -700 | while read job; do
        case "$job" in
        */core.id)
            # No need to fetch it again. And besides, we patched it
            # above to contain the version and api_key as well.
            output="$core_id"
            ret=0
            ;;
        *)
            log "$job: executing"
            output=$("$job" 2>"$temp")
            ret=$?
            test $ret -ne 0 && log "$job: return code was $ret"
            cat "$temp" | while read line; do
                log "$job: (STDERR) $line"
            done
            ;;
        esac

        if test -n "$output" && test $ret -eq 0; then
            collector=$(basename "$job")
            url=$(echo "$push_url" |
                  sed -e "s/{regid}/$regid/g;s/{_collector}/$collector/g")
            log "$job: push to $url"
            echo "$output" | post "$url"
        fi
    done
    rm -f "$temp"
}

calc_version=$(get_version)  # before "cd /"
cd /
check_config
while :; do
    run
    sleep 14400  # 4 hours
done
